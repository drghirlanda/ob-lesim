#+title: Ob-Lesim: Learning Simulator integration for Org-Mode
#+author: Stefano Ghirlanda
#+options: toc:nil ':t

* Introduction

Ob-Lesim supports editing and running Learning Simulator scripts in
Org-Mode.

* Installation

Install Lesim-Mode first. 

* Configuration

To enable Ob-Lesim in org-mode, add ~(require 'ob-lesim)~ to
your Emacs init file.

* Learning Simulator

You can learn about the Learning Simulator from these sources:
- [[https://learningsimulator.org][The Learning Simulator Website]]
- [[https://learningsimulator.readthedocs.io][Learning Simulator documentation on Read The Docs]]
- [[https://joss.theoj.org/papers/10.21105/joss.02891][Short article in the Journal of Open Source Software]]  

* Bugs and planned features

Bugs and planned features are tracked as [[https://github.com/drghirlanda/ob-lesim/issues][issues on Github]].

- When opening code block in a source edit buffer, point is not
  preserved if the code block contains noweb references. The reason is
  that references are expanded in ~ob-lesim-hook~ which is added to
  ~org-src-mode-hook~, but ~org-src-edit~ reposition the point /after/
  activating ~org-src-mode~ in the edit buffer. So ~ob-lesim-hook~
  cannot position point correctly.

- TAB in a lesim code block expands noweb references. Possibly because
  lesim-mode implements TAB by redefining the global indent
  function. 

* Internals

These are mostly notes to myself. Ob-Lesim has two ways of running
scripts:

1. Evaluate a code block in an org buffer. This works by:
   1. Saving full-body to temporary file
   2. Using lesim-run on the file
   3. Error is highlighting by matching the error line number in the
      code block and calculating an appropriate line number to pass to
      ~lesim-error~. This works with two identical script lines with
      the same error (could happen with cut-and-paste), because
      Learning Simulator stops at the first error.

2. Evaluate an org-src edit buffer with 'C-c r' (the lesim-mode
   keybinding). This works by:

   1. Expanding any noweb references with
      ~ob-lesim--expand-noweb~. This is done when creating the edit
      buffer so that error lines are matched easily and the user can
      see
   2. Saving temporary file How to support noweb references? This is necessary for:
      1. Getting a complete file to feed to lesim
      2. Resolve error line numbers correctly
      3. Validating the buffer with lesim-mode 

Now, things can be added to org source code buffers by using
org-src-mode-hook but it looks like this runs in the new buffer
without direct knowledge of the original org buffer. However, looking
at org-src and ob-core functions has hints on how to get information
from the original buffer, which could be used to expand noweb
references and insert them as read-only text in the source edit
buffer:

- org-babel-get-src-block-info returns a list of: language, code, list
  of code parameters.
- (org-src-do-at-code-block body) runs BODY in the original org buffer.
- one could use org-babel-expand-noweb-references but this would not
  let us mark the expansions, so we are going to emulate that function
  in our own words.

Later, one could support automatically inserting links to figure
files. Figures can be ~named~ consecutively if more than one.

