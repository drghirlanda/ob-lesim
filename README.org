#+title: Ob-lesim: Learning Simulator integration for Org-Mode
#+author: Stefano Ghirlanda
#+options: toc:nil ':t
#+latex_header: \usepackage[margin=1in]{geometry}

* Introduction

Ob-lesim supports editing and running [[https://learningsimulator.org][Learning Simulator]] scripts in
Emacs org-mode. In short, it is a bridge between org-babel (org-mode's
code execution system) and [[https://github.com/drghirlanda/lesim-mode][lesim-mode]], an Emacs major mode for
Learning Simulator scripts.

* Installing

1. Install [[https://github.com/drghirlanda/lesim-mode][lesim-mode]].
2. Put ~ob-lesim.el~ in your Emacs load path, for example, ~~./emacs.d/elisp~.
3. Add this to your Emacs init file, for example, ~~./emacs.d/init.el~:
   #+begin_src elisp :eval no
     (require 'ob-lesim)
     (add-to-list 'org-babel-load-languages '(lesim . t))
   #+end_src

* Using

Ob-lesim works mostly behind the scenes. Editing lesim code blocks
in org-mode should feel familiar:
- Embed Learning Simulator code in org-mode buffers with:
   #+begin_src org :eval no
     ,#+begin_src lesim
     ...
     ,#+end_src
   #+end_src
- Ob-lesim defines these default header arguments:
  - ~:results silent~, because Learning Simulator does not directly
    output that makes sense to insert.[fn:figures]
  - ~:noweb yes~, see [[Sharing code across scripts]].
  - Other header arguments have no effect unless handled directly by
    org-mode. For example:
    - Use ~:eval no-export~ to prevent evaluation of long-running
      scripts when exporting.
    - Use ~:tangle file.les~ to write a script to ~file.les~.
- Scripts can be run as code blocks in the org-mode buffer with the
  usual ~C-c C-c~ key binding.
- Scripts can also be run from the edit buffer, which has major mode
  ~lesim-mode~, with the regular lesim-mode key binding (by default,
  ~C-c C-r~).
- Lesim-mode features are partly available in the org-mode buffer (for
  example, ~TAB~ moves by field in phase blocks), and fully available
  in org-mode edit buffers.

[fn:figures]  This will change when Learning Simulator supports
saving figures without human intervention.

* Sharing code across scripts

Ob-lesim supports noweb references to share code across lesim code
blocks. For example, this is how you can make sure that two different
scripts use the same parameter values:

#+begin_src org :eval no
  This is a lesim parameter block:
  ,#+name: common-parameters:
  ,#+begin_src lesim
    # lesim parameter block here
  ,#+end_src

  This is the script 1:
  ,#+begin_src lesim
    <<common-parameters>>

    # script 1 here here
  ,#+end_src

  Ths is script 2:
  ,#+begin_src lesim
    <<common-parameters>>

    # script 2 here here
  ,#+end_src
#+end_src

You can also share phase blocks and other script snippets if
useful. Thanks to awesome engineering, noweb references are
automatically resolved when tangling, so that you end up with complete
scripts.

* Bugs and planned features

Bugs and planned features are tracked as [[https://github.com/drghirlanda/ob-lesim/issues][issues on Github]].

* Internals

These are mostly notes to myself. Ob-lesim has two ways of running
scripts:

1. Evaluate a code block in an org-mode buffer. This works by saving
   ~full-body~ to temporary file, expanding any noweb references, then
   using lesim-error and lesim-run on the file.

2. Evaluate an org-src edit buffer with ~C-c C-r~
   (~lesim-mode-run-key~). This works by expanding noweb references,
   then saving the buffer to a temporary file, using lesim-error and
   lesim-run, then collapsing the noweb references again.

